1. Hooks란?
    - 기존의 리액트는 클래스형 컴포넌트 위주로 개발이 됐었다.
    - 함수형 컴포넌트에는 state, ref등 생명주기 관리가 불가능했음
    - Hooks가 등장하면서 useState, useRef, useEffect등 클래스형 컴포넌트에
      존재하는 기능들이 함수형 컴포넌트에서도 사용가능하게 되었다.
    - Hooks란 상태관리를 useState, 렌더링 직후의 동작을 만들 수 있는 useEffect등
      기능을 제공해주는 라이브러리
    - Hooks는 함수형 컴포넌트와 함께 사용

2. useEffect
    - 컴포넌트 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook
    - 처음 렌더링될 때와 업데이트될 때마다 실행
    - 업데이트직전에 어떠한 작업을 수행하고 싶으면 
      useEffect에서 cleanup 함수를 리턴하면 됨

3. useReducer
    - 컴포넌의 상황에 따라 상태 값을 다른 값으로 
      업데이트하고 싶을 때 사용하는 Hook
    - 리듀서는 현재상태와 업데이트를 위해 필요한 정보를 담은 액션을 
      매개변수로 받음
    - function reducer(state, action) {

      }
    - const [state, dispatch] = useReducer(reducer, {
        상태의 초기값
      });
    - dispatch는 액션을 발생시키는 함수
    - dispatch(action) => 액션이 실행되면서 리듀서 함수를 호출

4. useMemo
    - 컴포넌트 내에서 발생하는 연산을 최적화해주는 Hook

5. useCallback
    - 주로 렌더링 성능을 최적화할 때 사용하는 Hook
    - useCallback 사용 시 만들어놓은 함수의 재사용성을 높일 수 있다.
    - 만들어진 함수들은 렌더링될때마다 새로 만들어짐
    - useCallback을 이용하면 새로운 함수가 계속 만들어지는 것을 방지